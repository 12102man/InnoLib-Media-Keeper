from telegram.ext import Updater
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ConversationHandler, MessageHandler, CallbackQueryHandler
from telegram.ext import Filters
from telegram import Bot
from telegram.ext import CommandHandler 

updater = Updater(token='497143382:AAEnGedITH37EbP0NCMEauG8s8DHT9jWpiY')

dispatcher = updater.dispatcher

import logging

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

##Menu for ordering
def build_menu():
    button_list = [
    [
    InlineKeyboardButton("Book", callback_data='book_search'),
    InlineKeyboardButton("Article", callback_data='article_search')
    ],
    [
    InlineKeyboardButton("A/V", callback_data='av_search')
    ]]

    reply = InlineKeyboardMarkup(button_list)
    return reply

def start(bot, update):
    bot.send_message(chat_id=update.message.chat_id,
                                        text="You have a patron access. What do you want to find?",
                                        reply_markup=build_menu())

NAME = range(1)
PHONE_NUMBER = range(2)
ADDRESS = range(3)
END_OF_SIGNUP = range(4)

BOOK_SEARCH = range(5)
ARTICLE_SEARCH = range(6)
AV_SEARCH = range(7)

##Elements of search conversation
def book_search(bot, update):
    query = update.callback_query
    bot.send_message(chat_id=query.message.chat_id, text="Send me name of the book")
    return BOOK_SEARCH

def article_search(bot, update):
    query = update.callback_query
    bot.send_message(chat_id=query.message.chat_id, text="Send me name of the article")
    return ARTICLE_SEARCH
	
def av_search(bot, update):
    query = update.callback_query
    bot.send_message(chat_id=query.message.chat_id, text="Send me name of the av")
    return AV_SEARCH
    
def book_name(bot, update):
    bot.send_message(chat_id=update.message.chat_id, text=update.message.text)
    return search_conversation.END
	
def article_name(bot, update):
    bot.send_message(chat_id=update.message.chat_id, text=update.message.text)
    return search_conversation.END
	
def av_name(bot, update):
    bot.send_message(chat_id=update.message.chat_id, text=update.message.text)
    return search_conversation.END

##Choosing right type of material
def search_functions(bot, update):
    query = update.callback_query.data
    if query == 'book_search':
        return book_search(bot, update)
    elif query == 'article_search':
        return article_search(bot, update)
    elif query == 'av_search':
        return av_search(bot, update)

##Functions fot registration
def registration(bot, update):
    bot.send_message(chat_id=update.message.chat_id, text="Now you should write you personal data to create your library card.")
    return NAME

def ask_name(bot, update):
    bot.send_message(chat_id=update.message.chat_id, text="Please, write your first and last name.")
    return PHONE_NUMBER

def ask_phone(bot, update):
    bot.send_message(chat_id=update.message.chat_id, text="Please, write your phone number.")
    return ADDRESS

def ask_address(bot, update):
    bot.send_message(chat_id=update.message.chat_id, text="Please, write your address.")
    return END_OF_SIGNUP

def end_of_registration(bot, update):
    bot.send_message(chat_id=update.message.chat_id, text="Application was sent to library!")
    return register_conversation.END
     
register_conversation = ConversationHandler(entry_points=[CommandHandler('enroll', registration)],
                                            states={
                                                NAME: [MessageHandler(Filters.text, ask_name)],
                                                PHONE_NUMBER: [MessageHandler(Filters.text, ask_phone)],
                                                ADDRESS: [MessageHandler(Filters.text, ask_address)],
                                                END_OF_SIGNUP: [MessageHandler(Filters.text, end_of_registration)]
                                                },
                                            fallbacks=[])

search_handler = CommandHandler('search', start)
search_query_handler = CallbackQueryHandler(search_functions, pass_groups=True)
search_conversation = ConversationHandler(entry_points=[search_query_handler],
                                            states={
						BOOK_SEARCH: [MessageHandler(Filters.text, book_name)],
						ARTICLE_SEARCH: [MessageHandler(Filters.text, article_name)],
						AV_SEARCH: [MessageHandler(Filters.text, av_name)]
						},
					    fallbacks=[], per_message=False)

dispatcher.add_handler(search_handler)
dispatcher.add_handler(search_conversation)
dispatcher.add_handler(search_query_handler)
dispatcher.add_handler(register_conversation)

updater.start_polling()
